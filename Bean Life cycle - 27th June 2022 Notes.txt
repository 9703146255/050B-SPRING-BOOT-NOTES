Spring Boot & Microservices
+++++++++++++++++++++++++
ADF
WE CAN DEV 3 TYPES
FOLLOW MOD FASHION
SPRING CAME INTO 2004
CURRENT VERSION OF SPRING IS 6.X
FREE AND OPEN SOURCE


01]WHAT IS SPRING
===============
-> Spring is an application development framework

-> By using spring framework we can develop below types of applications
			
				1) standalone applications
				2) web applications
				3) distributed applications

-> Spring framework developed in modular fashion

-> Spring framework came into market in 2004

-> The current version of Spring is 6.x[2022]

-> Spring is non-invasive framework

-> Spring is versatile framework

-> Free and open source


Note: When we develop application by using spring, programmer is responsible to take care of configurations required for the application.

-> After few years Spring team realized that for ""every project"" configurations are required"

-> ""Every Programmer"" dealing with configurations in the project

-> The configurations are common in the project


=> To overcome configuration problems spring team released Spring Boot into market

+++++++++++++++++++++
WHAT IS Spring Boot[AEI]
++++++++++++++++++++++
SB IS AN APPROACH

SB ENHANCED VERSION OF SPRING

SB ITERNALLY USES

WHAT APP DEV BY USING SB SAME WE CAN BY SB ALSO


=> SB is another approach to develop spring based applications with less configurations

=> Spring Boot is an enhacement of Spring framework

=> Spring Boot internally uses Spring framework only

=> What type of applications we can develop using spring framework, same type of applications can be developed by using Spring boot also


	Spring Boot = Spring Framework - XML Configurations


++++++++++++++++++++++++
Spring Boot Advantages      AP ERA
++++++++++++++++++++++++

1) Auto Configuration

2) POM starters

3) Embedded Servers

4) Rapid Development

5) Actuators


1) Auto Configuration[start ioc,create conn pool,create smtp, web app dep into ser,di]
================
-> Autoconfiguration means "springboot will identify" the configurations required for our application and it will provide that configurations

			- Starting IOC container 										[WEB-starter]
			- Creating Connection Pool  									[DATA-JPA-starter]
			- Creation SMTP Connections [ Simple Mail Transfer Protocol]	[mail-starter]
			- Web Application Deployment to Server                          [WEB-starter]
			- Depedency Injections etc....                                  [WEB-starter]

2) POM-DEP starters
=============
->[PROJECT OBJECT MODEL]  POM starters are nothing but dependencies that we use to develop our application

			a) web-starter
			b) jdbc-starter
			c) security-starter
			d) mail-starter

3) Embedded Servers   		boot==> web server[run our web app]
=================
-> Boot will provide "web server" to run our "web applications". Those servers are called as Embedded Server

			a) Tomcat (default)
			b) Jetty
			c) Netty[When we add webflux dep it will come by default]


4) Rapid Development
==================
-> Rapid Development means fast development. We can focus only on ["business logic"] because Boot will take care of configurations[common code].

5) Actuators[monitor and manage],production ready feature
=========================
-> Actuators are used to monitor and manage our application. Actuators providing "production-ready" features for our application.

			[CLS,OBJ,THREADS[run,not run],MAPPING,HEALTH]
			a) How many classes loaded
			b) how many objects created
			c) how many threads are running
			d) URL Mappings Available
			e) Health of the project etc...[default]
                        f) Stop app[post req] using post man we can stop app


+++++++++++++++++++++++++++++++++
Building  First Spring Boot Application
+++++++++++++++++++++++++++++++++

-> We can create boot application in 2 ways

1) using Spring Initializr website (start.spring.io)

2) using IDE


Creating project using start.spring.io
++++++++++++++++++++++++++++++++

-> Goto start.spring.io website and ==>	generate the project

-> It will download project in zip file 

-> Extract[unzip] that zip file

-> Go t IDE -> New -> Import -> Maven -> Existring Maven Project -> Select Project path upto pom.xml file location


Creating project using STS IDE
++++++++++++++++++++++++

-> Go to STS IDE

-> New -> Spring Starter Project -> Fill the details and create the projet

Note: STS IDE will use start.spring.io internally to create the project

Note: TO create spring boot application internet connection is mandatory for our application.


Spring Boot Application Folder Structure
+++++++++++++++++++++++++++++++++++
When we create spring boot application by default we will get app.java called start class.
When we create boot application by default we will get ==>		Application.java   (This is start class)  ,  application.properties or application.yml , ApplicationTests.java

- 09-Spring-Boot-App  -------------- Project Name (root folder)

	- src/main/java		
			- Application.java   (This is start class)

	- src/main/resources
			- application.properties or application.yml

	- src/test/java
			- ApplicationTests.java

	- Maven Dependencies   (It contains jars which got downloaded)

	- target  (it contains .class files)

	- pom.xml (Maven configuration file)


-> We will write "our source code" under src/main/java folder

-> We will create our "configuration files" under src/main/resources folder[db,server,web[prefix, suffix...],html files,js,properties...

-> We will create "Junit class" under src/test/java folder

-> "Project dependencies" we will configure in pom.xml file

-> POM stands for Project Object Model


+++++++++++++++++++++++++++++++
What is start class in Spring Boot?
+++++++++++++++++++++++++++++++

-> When we create boot application by default one java class will be created with a name "Application.java" i.e called as Start class of spring boot

-> Start class is the[these is ==> entry point for boot application execution

-> boot Application execution start from main method

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}


=> @SpringBootApplication annotation is equal to below 3 annotations[SEC]

@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan
================================================================================================================================================
 @SpringBootApplcation=@Configuration+@EnableAutoConfiguration+@ComponentScan
 
 @Configuration::
 ================
 ==>It is use to represent our java class is a "configuration class",

 ==>this is used to avoid XML basic configuration

 ==>Its helps in spring AnnotationBased configuration
 
 @EnableAutoConfiguration
 ========================
 Ioc container will identifies what are the dependencies required for our application development
 based on pom.xml file 

 it used "to guess the components/dependencies" that are required to run our application
 
 @ComponentScan
 ==============
 this is used to scan the application and identified as a spring bean class



=====================================================================================================================
what is the run() method in spring boot[sspp-cr
=====================================================================================================================
=> SpringApplication.run (..) method contains bootstrapping logic.
=> It is the entry point for boot application execution
		
			- start stop watch
			- start listners

			- prepareEnv
			- print Banner

			- create IOC container
			- refresh Container

			- stop that stop watch
			- print time taken to start application[TOTAL TIME]END TIME-START TIME]

			- call runners
			- return IOC reference

++++++++++++++++++
Banner in Spring Boot
++++++++++++++++++

-> In Boot application console we can see "spring logo" that is called as Banner in Spring Boot
-> We can customize banner text by creating "banner.txt" file under src/main/resources
-> We can keep our //company name or project name// as Banner text in Ascii format

Note: Generate Ascii text[AT] from here : https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Ashok%20IT

-> Spring Boot banner having below 3 modes[clo]

	1) console  ---- > it is default mode
	2) log
	3) off

Note: If we set banner mode as off then banner will not printed

		spring.main.banner-mode = off

+++++++++++++++++++++++++++++++++++++
How ioc container will start in Spring Boot ?
+++++++++++++++++++++++++++++++++++++

=> For boot-starter/STANDALONE, run( ) method using "AnnotationConfigApplicationContext" class to start IOC container

=> For boot-starter-web, run ( ) method using "AnnotationConfig  Servlet WebServer  ApplicationContext" to start IOC

=> For starter-webflux, run ( ) method using "AnnotationConfig  Reactive WebServer  ApplicationContext" to start IOC


-> boot-starter is used to create 			==>		standalone applications

-> boot-starter-web dependency is 			==>		used to develop web applications

-> boot-starter-webflux is dependency 		==> 	used to develop applications with Reactive Programming


++++++++++++++++++++
Runners in Spring Boot[RI]
++++++++++++++++++++

=> Runners are getting called at the end of run ( ) method

=> If we want to execute any logic only once when our application got started then we can use Runners concept

=> In Spring Boot we have 2 types of Runners

1) ApplicationRunner
2) CommandLineRunner

=> Both runners are functional interface. They have only one abstract method i.e run (..) methodd


Use cases
---------------
1) send email to management once application started
2) read data from db tables and store into cache memory
3) Load External Configuration Properties:
4) Initialize Database Connection Pool:


@Component								String... args
public class SendAppStartMail implements CommandLineRunner {

	@Override
	public void run(String... args) throws Exception {
		System.out.println("logic executing to send email....");
	}
}


@Component
public class CacheManager implements ApplicationRunner {

	@Override
	public void run(ApplicationArguments args) throws Exception {                                               ApplicationArguments args
		System.out.println("Logic executing to load data into cache....");
	}
}



Note: @Component annotation is used to represent our java class as Spring Bean


CommandLineRunner
=================
@Component
public class SendEmaintoManagement  implements CommandLineRunner
	{
                       public void run(String... args) throws Exception
		{
		SYSO("SEND EMAIL MNGMENT");
		}
	}

ApplicationRunner
===============
@Component
public class CollectDataFromDBToStoreInCache implemets ApplicationRunner
	{
	public void run(ApplicationArgument args) throws Exception
	{
	SYSO("SEND EMAIL MNGMENT");
	}
	}



SPRING ANNOTATIONS

WHAT IS ANNOTATION
===================
Annotation is used to provide meta data [DATA ABOUT THE DATA].

From java 1.5v onwards we have annotations support.

Annotations came into the market as alternative XML configurations

Spring framework also having support for annotations

SpringBoot also having support for annotations


+++++++++++++++++++++++++++
What is @SpringBootApplication ?
++++++++++++++++++++++++++++

-> This annotation used at start class of spring boot

-> This annotation is equal to below 3 annotations

	1) @SpringBootConfiguration
	2) @EnableAutoConfiguration
	3) @ComponentScan



What is ComponentScan ?
+++++++++++++++++++++

-> The process of scanning packges in the application to identify spring bean classes is called as Component Scan

-> Component Scan is built-in concept

-> Component Scanning will start from base package

Note: The package which contains "start class" is called as base package.

-> After base packge scanning completed it will scan sub packages of base package.

Note: The package names which are starting with base package name are called as sub packages.

					in.ashokit     (base package)
					in.ashokit.dao
					in.ashokit.service
					in.ashokit.config
					in.ashokit.rest
					in.ashokit.util
					com.wallmart.security ----> This is not sub package so scanning will not happen


-> We can specify more than one base package also in our boot start class

@SpringBootApplication
@ComponentScan(basePackages = { "in.ashokit", "com.wallmart" })
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}


==============================================================
@ComponentScan(basePackage={"in.ashokit","com.walmart"}
===============================================================
@SpringBootApplication
@ComponentScan(basePackage={"in.ashokit","com.walmart"}
public class Application
	{
            public static void main(Sring[] args)
	{
	SpringApplication.run(Application.class, args)
	}
	}	

=================================================================

Note: It is highly recommended to follow proper package naming conventions

		Ex:   companyDomainName.projectName.moduleName.layerName

			com.tcs.passport   (basePkgName)
			com.tcs.passport.user.dao
			com.tcs.passport.user.service

what is Spring Bean?
===============
The java class which is managing by ioc container is called spring bean
or 
The life cycle of of java class maintained by ioc container is called spring Bean.

ioc and di are fundamental concepts in sprin framework

how to represent our class as a spring bean
================================
1)Using XML configuration 

<bean id="car" class="in.ashokit.Car"/> //outdated concept

2)Using annotations


+++++++++++++++++++++++
What is @Bean annotation
+++++++++++++++++++++++

-> @Bean is a method level annotation

-> If we want to customize any object creation then we will use @Bean annotation for that

@Configuration
public class AppConfig {

	@Bean
	public AppSecurity createInstance() {
		AppSecurity as = new AppSecurity();
		// custom logic to secure our functionality
		return as;
	}
}


Note: @Bean Annotation we can write "in any spring bean class" but recommended to write in @Configuration class like above.

==============================================================================================

@Configuration
public class AppConfig
		{
		@Bean	
		  public AppSecure  createInstance()
			{
			AppSecure  as=new AppSecure ();
                                                          return as;
			}
		}








How to represent java class as a Spring Bean?
++++++++++++++++++++++++++++++++++++++

@Component
@Service
@Repository

@Controller
@RestController

@Configuration
@Bean

@Autowired
@Qualifier


Note: All the above annotations are class level annotations but  @Bean is method level annotation

@Component
==========
-> @Component is a general purpose annotation to represent java class as Spring Bean


@Service 
=======
-> @Service annotation is a specialization of @Component annotation. 

->This is also used to represent java class as spring bean.

-> It is allowing for implementation classes to be autodetected through classpath scanning.

	Note: For business classes we will use @Service annotation

@ Repository 
==========

-> @ Repository annotation is a specialization of @Component annotaton. 

->This is also used to represent java class as spring bean. It is having Data Access Exception translation

	Note: For dao classes we will use @Repository


@Controller
=========
-> In Web applications to represent java class as controller we will use @Controller annotation. 

->It is used for C2B communication.


@RestController
=============
-> In Distributed application to represent java class as distributed component we will use @RestController annotation.

-> It is used for B2B communication.


@Configuration
===========
-> If we want to perform customized configurations then we will use @Configuration annotation along with @Bean methods.

-> Based on requirement we can have multiple @Configuration classes in the project.

	Ex: Swagger Config, DB Config, RestTemplate Config, Kafka Config, Redis Config, Security Config etc...

Note: @Bean annotated method we can keep in any spring bean class but it is highly recommended to keep them in @Configuration classes. 



Autowiring
+++++++++

-> Autowiring is used to perform dependency injection

-> The process of injecting one class object into another class object is called as dependency injection.

-> In Spring framework "IOC container" will perform dependency injection

DI in 2 ways
==========
-> We will provide instructions to IOC to perform DI in 2 ways

		1) Manual Wiring  (using ref attribute in beans config xml file)

		2) Autowiring

-> Autowiring means IOC will identify "dependent object" and it will inject into "target object"

modes  in 3 ways
=============
-> Autowiring will use below modes to perform Dependency Injection
		
			1) byName
			2) byType
			3) constructor (internally it will use byType only)

-> To perform Autowiring we will use @Autowired annotation


we can use at 3 places
================
-> @Autowired annotation we can use at 3 places in the program

			1) variable level   (Field injection - FI )
			2) setter method level (Setter Injection - SI )
			3) constructor (Constructor Injection - CI )

Note: Autowiring supports only referenced types (No suppot for primitive types)


Autowiring Example with @Qualifer
+++++++++++++++++++++++++++++++
==>@Autowired ano==>byType mode to identify "dependent object"
==> interface impl a,b,b//intrf more than one imp




-> When we use @Autowired annotation it will use byType mode to identify "dependent object"

-> If our interface having more than one impl then IOC will get confused to perform DI (Ambiguity)

 interface impl a,b,b

-> To resolve that ambiguity problem we will use @Qualifier "to speicify bean name to inject"

Note: When we use @Qualifier it will use "byName mode" to inject dependent object

Note: If we don't want to use @Qualifier then we should specify @Primary for "one bean to" get injected

 
public interface ReportDao {
	public String findData();
}

@Repository("oracle")
public class OracleReportDaoImpl implements ReportDao {

	public OracleReportDaoImpl() {
		System.out.println("OracleReportDaoImpl :: Constructor");
	}

	@Override
	public String findData() {
		System.out.println("fetching report data from oracle db...");
		return "Report data";
	}
}

@Repository("mysql")
public class MysqlReportDaoImpl implements ReportDao {

	public MysqlReportDaoImpl() {
		System.out.println("MysqlReportDaoImpl :: Constructor");
	}

	@Override
	public String findData() {
		System.out.println("fetching report data from mysql db...");
		return "Report data";
	}
}

@Service
public class ReportService {

	private ReportDao reportDao;

	@Autowired
	@Qualifier("oracle")
	public void setReportDao(ReportDao reportDao) {
		System.out.println("setReportDao() method called...");
		this.reportDao = reportDao;
	}

	public void generateReport() {
		reportDao.findData();
		System.out.println("generating report....");
	}
}

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);
		
		ReportService reportService = context.getBean(ReportService.class);
		
		reportService.generateReport();
	}
}



@Autowired at Constructor Level
++++++++++++++++++++++++++++
=>0-Param constructor
parameterized constructor
ioc will use 0-param constrictor to create object

=>IOC container 
choose  Param-Constructor
to create obj
we should write @Autowired annotation at param-constructor
       



-> If we have both 0-Param constructor and parameterized constructor then ioc will use 0-param constrictor to create object

-> If we want IOC to choose Param-Constructor to create obj then we should write @Autowired annotation at param-constructor


Note: If we have only param constructor in our class then @Autowired is optional

@Service
public class ReportService {

	private ReportDao reportDao;
	
////////////////////only parameteraised contructor///////////////////////////////////////////////////////////////////////@Autowired is optional
	public ReportService(ReportDao reportDao) {
		System.out.println("ReportService :: Param Constructor called...");
		this.reportDao = reportDao;
	}

	public void generateReport() {
		reportDao.findData();
		System.out.println("generating report....");
	}
}


@Autowired with Field Injection
+++++++++++++++++++++++++

-> IOC will use "Reflection api" to internally to perform Field Injection

@Service
public class ReportService {

	@Autowired
	private ReportDao reportDao;

	public void generateReport() {
		reportDao.findData();
		System.out.println("generating report....");
	}
}



Note: Field Injection is not recommended because it is "violating oops principles" and "it breaks Single Responsibility Principles."

-> When objects injected using field injection code review tools can't identify complexity.


SI vs CI vs FI
+++++++++++++
SI
===
-> "Setter Injection" will be performed through setter method
-> It is mandatory to specify @Autowired annoation at setter method
-> If we don't specify @Autowired annotation then DI will not happen (Partial Injection)
-> If DI not happend, when we call methods then we will get NullPointerException
-> Target Bean will be created first then setter method will be called to inject dependent

CI
===
-> "Constructor injection" will be performed through constructor
-> If we have more than one constructor then we have to specify @Autowired at constructor level
-> If we have only one parameterized constructor then @Autowired is optional
-> In CI, "dependent bean" will be created first then "target bean" will be created
-> Partial Injection is not possible in CI

FI
===
-> FieldInjection will be performed through "Reflection API"
-> It is mandatory to specify @Autowired annoation at Field level
-> FI violating OOPS principles (private variable getting initialized from outside using Reflecion)
-> It is simple to use
-> Most of the programmers will use FI in projects because it us jus one line code


Note: Out of all these Dependency Injections, Constructor Injection is recommended because Partial Injection not possible and target bean will be created if dependent bean is available.





Bean Life Cycle
++++++++++++++

-> The java class which represented as Spring Bean is called as Bean Class

-> The java class which is managed by IOC is called as Spring Bean

-> Spring Beans life cycle will be managed by IOC

-> For Spring Beans Obj creation and Obj destruction will be taken by IOC container

-> We can execute life cycle methods for Spring Bean

-> In Spring Boot, we can work with Bean Lifecycle methods in 2 ways

			1) By Implementing interfaces ( IntializingBean(afterPropertySet()) & DisposableBean(Destroy()) )

			2) By Using Annotations ( @PostConstruct & @PreDestory )



// interface approach

@Component
public class Motor implements InitializingBean, DisposableBean {

	public Motor() {
		System.out.println("Motor :: Constructor");
	}

	@Override
	public void afterPropertiesSet() throws Exception {
		System.out.println("afterPropertiesSet() method called....");
	}

	@Override
	public void destroy() throws Exception {
		System.out.println("destroy() method called....");
	}
}

// Annotation Approach

@Component
public class Engine {

	public Engine() {
		System.out.println("Engine :: Constructor");
	}

	@PostConstruct
	public void init() {
		System.out.println("start engine....");
	}

	@PreDestroy
	public void destroy() {
		System.out.println("stop engine...");
	}

}












































					

































































