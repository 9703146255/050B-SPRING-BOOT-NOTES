01)  Spring Data JPA
02)  CrudRepository
03)  JpaRepository
04)  Hibernate Vs Data JPA
05)  Environment Setup
06)  MySQL DB Properties
07)  Entity Class
	@Entity 
	@Table
	@Id
	@Column
08)  Repository Interfaces
09)  Datasource properties
10)  ORM Properties
11)  CrudRepository methods(12) ==> find(3),save(2),exist,delete(5),count
12) findby methods
13) custom queries


Spring Data JPA
+++++++++++++
==>to develop "persistence logic"
==>logic which is responsible to communicate with database
==> JDBC, Spring JDBC, Hibernate, Spring ORM==>develop persistence logic
==> JDBC,or Spring JDBC or Hibernate or Spring ORM ==> common logics in all DAO classes==> perform crud operations
==>Data JPA "simplified persistence logic==>pre-defined interfaces with methods
==> Data JPA provided "Repository methods"


-> It is used to develop "persistence logic" in our application

-> The logic which is responsible to communicate with database is called as Persistence Logic

-> Already we have JDBC, Spring JDBC, Hibernate, Spring ORM to "develop persistence logic"

-> If we use JDBC,or Spring JDBC or Hibernate or Spring ORM then "we should have common logics in all DAO classes" to perform CURD Operations

-> Data JPA "simplified persistence logic development" by providing pre-defined interfaces with methods

-> Data JPA provided "Repository methods" to perform CURD operations

Note: If we use Data JPA then we don't need to write logic to perform curd operations bcz Data JPA will take care of that

-> Data JPA provideed Repository interfaces to perform CURD operations

	1) CrudRepository  (Methods to perform Crud Operations)

	2) JpaRepository (Methods to perform Crud Operations + Pagination + Sorting + QBE)[Query by Example."]



 
++++++++++++++++++
Hibernate 
========
==>we should implement all methods
==>we should have boiler plate code


==>predefined methods"
==>Data JPA we don't need to write any method 




-> In Hibernate "we should implement all methods" to perform CRUD operations
-> Data JPA providing "predefined methods" to perform CRUD Operations

-> In Hibernate we should boiler plate code (same code in multiple classes)
-> In Data JPA we don't need to write any method because JPA Repositories providing methods for us


Environment Setup
+++++++++++++++++

1) MySQL Database (Server s/w)   (https://dev.mysql.com/downloads/installer/)
2) MySQL  Workbench (Client s/w) (https://dev.mysql.com/downloads/workbench/)



MySQL DB Properties
++++++++++++++++++

spring.datasource.url=jdbc:mysql://localhost:3306/sbms
spring.datasource.username=ashokit
spring.datasource.password=AshokIT@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true



EVERY JAVA  CLASS--> DB TABLE
EVERY ATTRIBUTE--> COLUMN
EVERY  OBJ REF VAR> DB ROW


Entity Class
++++++++++++++
@Entity 
@Table
@Id
@Column


-> The java class which is mapped with DB table is called as Entity class

-> To map java class with DB table we will use below annotations


@Entity : It represents our class as Entity class. (It is mandatory annotation)

@Table : It is used to map our class with DB Table name [our class==>DB Table name]

Note : @Table is optional if our class name and table is same. If we don't give @Table then it will consider "class name" as "table name".

variable mapping==>primary column

@Id : It represents variable mapping with primary column in table (It is mandatory annotation)

@Column : It is used to map our class variables with DB table column names

Note: @Column is optional if class variable name and DB table column names are same. If we don't give @Column then it will consider variable name as column name.


Note: For every table we should create one Entity class. Entity class represents  DB operations should be performed in which table.


@Entity
@Table(name="CRICKET_PLAYERS")
public class Player {

	@Id
	@Column(name="PLAYER_ID")
	private Integer playerId;

	@Column(name="PLAYER_NAME")
	private String playerName;

	@Column(name="PLAYER_AGE")
	private Integer playerAge;

	@Column(name="LOCATION")
	private String location;
}



Note: One entity class will be mapped with only one DB table.


+++++++++++++++++++
Repository Interfaces
++++++++++++++++++++

-> JPA provided repository interfaces to perform Curd Operations

-> For Every DB table we will create one Repository interface by extending Jpa Repository


Syntax: 
---------
public interface PlayerRepository extends CrudRepository<Entity, ID>{
}

Example
-----------
public interface PlayerRepository extends CrudRepository<Player, Serializable>{
}

Note: When our interface extending properties from JPA Repository interfaces then JPA will provide implementation for our interface in Runtime using Proxy Design Pattern.


+++++++++++++++++++++
Datasource properties
++++++++++++++++++++

-> Datasource properties represents with "which database we want connect"

				- DB URL
				- DB Uname
				- DB Pwd
				- DB Driver Class


-> We will configure datasource properties in application.properties file or application.yml file

spring.datasource.url=jdbc:mysql://localhost:3306/sbms
spring.datasource.username=ashokit
spring.datasource.password=AshokIT@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver


+++++++++++++
ORM Properties
++++++++++++++

-> Hibernate provided some additional benefits while developing persistence logic

-> Tables can be created dynamically  using "auto-ddl" property

-> We are calling JPA methods to perform DB operations. Those methods will generate queries to execute. To print those queries on console we can use 'show-sql' property



+++++++++++++++++++++++++
Build First App using Data JPA
++++++++++++++++++++++++++

1) Create spring boot application with below dependencies

		a) starter-data-jpa
		b) mysql-connector

2) Create Entity class using Annotations

3) Create Repository interface by extending CrudRepository

4) Configure DataSource & ORM properties in application.properties file

5) Call Repository methods in start class to perform DB operations


CrudRepository methods
++++++++++++++++++++

1) save (. )  :: upsert method ( insert and update ) - for one record

2)  saveAll  ( ..) :: upsert method (insert and update) - for multiple records

3) findById (. ) :: To retrieve single record using primary key

4) findAllById ( ..) :: To retrieve multiple records using primary keys

5) findAll  ( ) :: To retrieve all records from table

6) count ( ) :: To get total records count

7) existsById  (. ) : To check record presence in table using Primary key

8) deleteById (. ) : To delete single record using primary key

9) deleteAllById (.. ) : To delete multiple records using primary keys

10) delete(. ) : To delete record using entity object

11) deleteAll  (.. ) : To delete all records from table with given entities

12) deleteAll ( ) : To delete all records




------------------------------------------------------------------------------------------------------------------------------------------------------------------
@Entity
@Table(name = "USER_MASTER")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {

	@Id
	@Column(name = "USER_ID")
	private Integer userid;

	@Column(name = "USER_NAME")
	private String username;

	@Column(name = "USER_GENDER")
	private String gender;

	@Column(name = "USER_AGE")
	private Integer age;

	@Column(name = "USER_COUNTRY")
	private String country;

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
public interface UserRepository extends CrudRepository<User, Integer> {

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

@SpringBootApplication
public class Application {
	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);

		UserRepository repository = context.getBean(UserRepository.class);

		/*User u1 = new User(101, "Ramu", "Male", 25, "India");

		repository.save(u1);*/

		/*User u2 = new User(102, "Raju", "Male", 26, "India");
		User u3 = new User(103, "John", "Male", 30, "USA");
		User u4 = new User(104, "Smith", "Male", 32, "Canada");

		repository.saveAll(Arrays.asList(u2, u3, u4));*/
		
		/*Optional<User> findById = repository.findById(103);
		if(findById.isPresent()) {
			System.out.println(findById.get());
		}*/
		
		/*Iterable<User> allById = repository.findAllById(Arrays.asList(101,102,103));
		allById.forEach(user -> {
			System.out.println(user);
		});*/
		
		/*Iterable<User> findAll = repository.findAll();
		findAll.forEach(user -> {
			System.out.println(user);
		});*/
		
		/*long count = repository.count();
		System.out.println("Total Records in table :: "+ count);*/
		
		/*boolean existsById = repository.existsById(101);
		System.out.println("Record Presence with id - 101 :: " + existsById);*/
		
		//repository.deleteById(104);
		
		repository.deleteAllById(Arrays.asList(102,103));
	}
}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
spring.datasource.url=jdbc:mysql://localhost:3306/sbms
spring.datasource.username=ashokit
spring.datasource.password=AshokIT@123
spring.datasource.driver-class-name=com.mysql.jdbc.Driver


spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

-> In CrudRepository interface we have methods to retrieve records

		1) findById (ID)  ----> to retrieve based on primary key

		2) findAllById(Iterable<ID> ids) ----> to retrieve based on multiple primary keys

		3) findAll( ) -----> to retrieve all records


Requirement -1 :  Retrieve users records who are belongs to INDIA
Requirement -2 : Retrieve users whose age is below 30 years

Note: user_age and user_country are non-primary columns in the table

-> To retrieve data based on Non-Primary key columns we don't have pre-defined methods. To implement these kind of requirements in Data JPA we have below 2 options

1) findby methods

2) custom queries
















































