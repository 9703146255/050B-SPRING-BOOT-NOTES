#########################################
application.properties file vs application.yml file
##########################################
when we create boot app=>by default app.prop
==
prop file rep data k,v format
.prp ==>seq
.prop==>sup only java
for every prof we need to create seperate profile



-> When we create spring boot application by default application.properties will be created

-> We can avoid hard coded values by configuring app properties in this application.properties file

-> properties file will represent data only in key-value format


Ex:

server.port = 9090
spring.mvc.view.prefix = /views/
spring.mvc.view.suffix = .jsp

-> properties file will represent data in sequential format

-> .properties file will be supported by only java

-> For every profile we need to create a seperate properties file


******** As an alternate to .properties file we can use .yml file in spring boot ***************


-> YML stands YET ANOTHER MARKUP Language

-> YML represents data in hierarchial format

server:
  port: 9090

-> YML supports key-value, list and map values also

-> YML supported by other programming languages also (It is universal)

-> All the profiles can be configured in single YML file


############################
Working with Dynamic Properties
##############################

++++++++++++++++
application.yml
++++++++++++++++++++++
server:
  port: 9090
spring:
  application:
    name: sb-rest-api
messages:
  welcome: Welcome to Ashok IT..!!
  greet: Good Morning


++++++++++++++++++++++++++++++++++
@RestController
public class WelcomeRestController {

	@Value("${messages.welcome}")
	private String welcomeMsg;

	@Value("${messages.greet}")
	private String greetMsg;

	@GetMapping("/welcome")
	public String welcomeMsg() {
		return welcomeMsg;
	}

	@GetMapping("/greet")
	public String greetMsg() {
		return greetMsg;
	}
}
+++++++++++++++++++++++++++++++++++
AM, RST END POINTS Urls

-> application messages and REST ENdpoint URLS are not recommended to hardcode in java classes. Because if we change any message or any url then we have to compile and package entire application.

-> To avoid this problem we will configure messages and URLs in application.properties file or in application.yml file

-> When we change application.properties file or application.yml file we no need to compile and build entire project .


###########################
Working with App Properties
##########################

------------------------------application.yml-----------------------------
spring:
  application:
    name: sb-yml-app
ashokit:
  messages:
    welcomeMsg: Welcome To Ashok IT
    greetMsg: Good Morning
    wishMsg: All the best

---------------------------AppProperties.java-----------------------------------
@Data
@Configuration
@EnableConfigurationProperties
@ConfigurationProperties(prefix="ashokit")
public class AppProperties {
	
	private Map<String, String> messages = new HashMap<>();

}
-----------------------------DemoRestController.java---------------------------
@RestController
public class DemoRestController {

	@Autowired
	private AppProperties props;

	@GetMapping("/welcome")
	public String getWelcomeMsg() {
		Map<String, String> messages = props.getMessages();
		String value = messages.get("welcomeMsg");
		return value;
	}

	@GetMapping("/greet")
	public String getGreetMsg() {
		Map<String, String> messages = props.getMessages();
		System.out.println(messages);
		String value = messages.get("greetMsg");
		return value;
	}
	
	@GetMapping("/wish")
	public String getWishMsg() {
		return props.getMessages().get("wishMsg");
	}
}
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


















