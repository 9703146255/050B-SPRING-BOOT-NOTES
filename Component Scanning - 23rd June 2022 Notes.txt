Spring Boot & Microservices
+++++++++++++++++++++++++

-> Spring is an application development framework

-> By using spring framework we can develop below types of applications
			
				1) standalone applications
				2) web applications
				3) distributed applications

-> Spring framework developed in modular fashion

-> Spring framework came into market in 2004

-> The current version of Spring is 5.x 

-> Spring is non-invasive framework

-> Spring is versatile framework


Note: When we develop application by using spring, programmer is responsible to take care of configurations required for the application.

-> After few years Spring team realized that for every project configurations are required

-> Every Programmer dealing with configurations in the project

-> The configurations are common in the project


=> To overcome configuration problems spring team released Spring Boot into market

+++++++++++++++
Spring Boot
++++++++++++++++

=> It is another approach to develop spring based applications with less configurations

=> Spring Boot is an enhacement of Spring framework

=> Spring Boot internally uses Spring framework only

=> What type of applications we can develop using spring framework, same type of applications can be developed by using Spring boot also


	Spring Boot = Spring Framework - XML Configurations


++++++++++++++++++++++++
Spring Boot Advantages
++++++++++++++++++++++++

1) Auto Configuration

2) POM starters

3) Embedded Servers

4) Rapid Development

5) Actuators



-> Autoconfiguration means boot will identify the configurations required for our application and it will provide that configurations

			- Starting IOC container
			- Creating Connection Pool
			- Creation SMTP Connections
			- Web Application Deployment to server
			- Depedency Injections etc....

-> POM starters are nothing but dependencies that we use to develop our application

			a) web-starter
			b) jdbc-starter
			c) security-starter
			d) mail-starter

-> Boot will provide web server to run our web applications. Those servers are called as Embedded Server

			a) Tomcat (default)
			b) Jetty
			c) Netty

-> Rapid Development means fast development. We can focus only on business logic because Boot will take care of configurations.

-> Actuators are used to monitor and manage our application. Actuators providing production-ready features for our application.

			a) How many classes loaded
			b) how many objects created
			c) how many threads are running
			d) URL Mappings Available
			e) Health of the project etc...


+++++++++++++++++++++++++++++++++
Building  First Spring Boot Application
+++++++++++++++++++++++++++++++++

-> We can create boot application in 2 ways

1) using Spring Initializr website (start.spring.io)

2) using IDE


Creating project using start.spring.io
++++++++++++++++++++++++++++++++

-> Goto start.spring.io website and generate the project

-> It will download project in zip file 

-> Extract that zip file

-> Go t IDE -> New -> Import -> Maven -> Existring Maven Project -> Select Project path upto pom.xml file location


Creating project using STS IDE
++++++++++++++++++++++++

-> Go to STS IDE

-> New -> Spring Starter Project -> Fill the details and create the projet

Note: STS IDE will use start.spring.io internally to create the project

Note: TO create spring boot application internet connection is mandatory for our application.


Spring Boot Application Folder Structure
+++++++++++++++++++++++++++++++++++

- 09-Spring-Boot-App  -------------- Project Name (root folder)

	- src/main/java		
			- Application.java   (This is start class)

	- src/main/resources
			- application.properties or application.yml

	- src/test/java
			- ApplicationTests.java

	- Maven Dependencies   (It contains jars which got downloaded)

	- target  (it contains .class files)

	- pom.xml (Maven configuration file)


-> We will write our source code under src/main/java folder

-> We will create our configuration files under src/main/resources folder

-> We will create Junit class under src/test/java folder

-> Project dependencies we will configure in pom.xml file

-> POM stands for Project Object Model


+++++++++++++++++++++++++++++++
What is start class in Spring Boot?
+++++++++++++++++++++++++++++++

-> When we create boot application by default one java class will be created with a name Application.java i.e called as Start class of spring boot

-> Start class is the entry point for boot application execution

@SpringBootApplication
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}

=> @SpringBootApplication annotation is equal to below 3 annotations

@SpringBootConfiguration
@EnableAutoConfiguration
@ComponentScan

=> SpringApplication.run (..) method contains bootstrapping logic. It is the entry point for boot application execution
		
			- start stop watch
			- start listners
			- prepareEnv
			- print Banner
			- create IOC container
			- refresh Container
			- stop that stop watch
			- print time taken to start application
			- call runners
			- return IOC reference

++++++++++++++++++
Banner in Spring Boot
++++++++++++++++++

-> In Boot application console we can see spring logo that is called as Banner in Spring Boot
-> We can customize banner text by creating "banner.txt" file under src/main/resources
-> We can keep our company name or project name as Banner text in Ascii format

Note: Generate Ascii text from here : https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Ashok%20IT

-> Spring Boot banner having below 3 modes

	1) console  ---- > it is default mode
	2) log
	3) off

Note: If we set banner mode as off then banner will not printed

		spring.main.banner-mode = off

+++++++++++++++++++++++++++++++++++++
How ioc container will start in Spring Boot ?
+++++++++++++++++++++++++++++++++++++

=> For boot-starter, run( ) method using "AnnotationConfigApplicationContext" class to start IOC container

=> For boot-starter-web, run ( ) method using "AnnotationConfigServletWebServerApplicationContext" to start IOC

=> For starter-webflux, run ( ) method using "AnnotationConfigReactiveWebServerApplicationContext" to start IOC


-> boot-starter is used to create standalone applications

-> boot-starter-web dependency is used to develop web applications

-> boot-starter-webflux is dependency is used to develop applications with Reactive Programming


++++++++++++++++++++
Runners in Spring Boot
++++++++++++++++++++

=> Runners are getting called at the end of run ( ) method

=> If we want to execute any logic only once when our application got started then we can use Runners concept

=> In Spring Boot we have 2 types of Runners

1) ApplicationRunner
2) CommandLineRunner

=> Both runners are functional interface. They have only one abstract method i.e run (..) methodd


Use cases
---------------
1) send email to management once application started
2) read data from db tables and store into cache memory



@Component
public class CacheManager implements ApplicationRunner {

	@Override
	public void run(ApplicationArguments args) throws Exception {
		System.out.println("Logic executing to load data into cache....");
	}
}

@Component
public class SendAppStartMail implements CommandLineRunner {

	@Override
	public void run(String... args) throws Exception {
		System.out.println("logic executing to send email....");
	}
}


Note: @Component annotation is used to represent our java class as Spring Bean


+++++++++++++++++++++++++++
What is @SpringBootApplication ?
++++++++++++++++++++++++++++

-> This annotation used at start class of spring boot

-> This annotation is equal to below 3 annotations

	1) @SpringBootConfiguration
	2) @EnableAutoConfiguration
	3) @ComponentScan



What is ComponentScan ?
+++++++++++++++++++++

-> The process of scanning packges in the application to identify spring bean classes is called as Component Scan

-> Component Scan is built-in concept

-> Component Scanning will start from base package

Note: The package which contains start class is called as base package.

-> After base packge scanning completed it will scan sub packages of base package.

Note: The package names which are starting with base package name are called as sub packages.

					in.ashokit     (base package)
					in.ashokit.dao
					in.ashokit.service
					in.ashokit.config
					in.ashokit.rest
					in.ashokit.util
					com.wallmart.security ----> This is not sub package so scanning will not happen


-> We can specify more than one base package also in our boot start class

@SpringBootApplication
@ComponentScan(basePackages = { "in.ashokit", "com.wallmart" })
public class Application {

	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);
	}
}

Note: It is highly recommended to follow proper package naming conventions

		Ex:   companyDomainName.projectName.moduleName.layerName

			com.tcs.passport   (basePkgName)
			com.tcs.passport.user.dao
			com.tcs.passport.user.service


+++++++++++++++++++++++
What is @Bean annotation
+++++++++++++++++++++++

-> @Bean is a method level annotation

-> When we want to customize any object creation then we will use @Bean annotation for that

@Configuration
public class AppConfig {

	@Bean
	public AppSecurity createInstance() {
		AppSecurity as = new AppSecurity();
		// custom logic to secure our functionality
		return as;
	}
}



Note: @Bean method we can write in any spring bean class but recommended to write in @Configuration class like above





































					

































































